Mastermind

module NewGame
  self.new_game
    game = game_type
    if game == 0
      breaker = CodeBreaker.new_game
      breaker.start
    else 
      maker = CodeMaker.new_game
      maker.start
    end
  end

  self.game_type
    puts 'Enter a 0 or 1 to play as Code Breaker(0) or Code Maker(1).'
    choice = gets
    game_type if choice.length > 1 || choice.scan(/[1,0]/).empty?
    choice
  end
end
      
module Gameplay

  ask_for_rounds
    print message
    chosen_rounds = gets.chomp.to_i
    ask_for_rounds unless chosen_rounds.between?(1,10)
  end

  ask_for_input
    print message
    guess = gets.chomp.split(',')
    ask_for_input unless verify_input(guess) == true
  end

  verify_input(guess)
    guess.all? { |color| COLORS.include(color) }
  end

  ask_for_code
    print message
    chosen_code = gets.chomp.split(',')
    ask_for_code unless verify_code(chosen_code) == true
  end

  verify_code(code_array)
    code_array.all { |choice| Game::COLORS.include?(choice) }
  end
end

module Display
  welcome_message

  display_board(board)

  correct_guess_message

  out_of_turns_message

  game_won_message

  game_lost_message

  game_over_message

  last_guess_warning
    puts 'Last guess!'
  end

  last_round_warning
end

module GameLogic
  compare(guess, answer)
  exact_match => returns [match symbols]
  close_match => returns [match symbols]
end

module ComputerLogic
end
  
class Game
  include GamePlay
  include Display
  include GameLogic
  COLORS = %w[red orange yellow green blue purple]
  attr_accessor :turns, :rounds, :board, :curr_guess

  initialize(rounds, answer = Array.new(4) { COLORS.sample })
    @answer = answer
    @turns = 0
    @rounds = rounds
    @board = []
  end

  start
    loop do
      play_round
      break if rounds < 0
      reset_round
    end
    end_game

  play_round
    rounds -= 1
    last_round_warning if rounds == 0
    loop do
      @curr_guess = play_turn
      update_board
      break if end_round
    end
  end

  reset_round
    answer = Array.new(4) { COLORS.sample }
    turns = 0
    board = []
  end

  end_round
    if turns == 12
      out_of_turns_message
      puts "The answer was #{answer}."
      board = []
      true
    elsif curr_guess == answer
      correct_guess_message
      board = []
      true
    end
  end

  end_game
    game_over_message
  end

  play_turn
    turns += 1
    last_guess_warning if turns == 12
  end

  update_board
    results = compare(curr_guess, answer)
    board << { guess: curr_guess, result: result}
    display_board(board)
  end
end

class CodeBreaker < Game
  self.new_game
    new(ask_for_rounds)
  end

  play_turn
    super
    ask_for_input
  end
end

class CodeMaker < Game
  include ComputerLogic
  self.new_game
    new(ask_for_rounds, ask_for_code)
  end

  play_turn
    super
    computer_guess
  end
end